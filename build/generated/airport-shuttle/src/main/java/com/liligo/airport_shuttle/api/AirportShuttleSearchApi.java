/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.liligo.airport_shuttle.api;

import com.liligo.airport_shuttle.model.GetAvailableShuttleRoutesResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-08-18T08:58:05.486826+02:00[Europe/Budapest]", comments = "Generator version: 7.4.0")
@Tag(name = "Airport Shuttle Search", description = "the Airport Shuttle Search API")
public interface AirportShuttleSearchApi {

    /**
     * GET /search-shuttles
     * Get all available shuttles based on search criteria
     *
     * @param departureLocation  (required)
     * @param limit The maximum number of shuttles to return. If not provided, it will return all the shuttles from the offset. (optional)
     * @param offset The offset from where to return the shuttles from. The first index is 0. If not provided, it will return the shuttles from the first index. (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAvailableShuttleRoutes",
        description = "Get all available shuttles based on search criteria",
        tags = { "Airport Shuttle Search" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetAvailableShuttleRoutesResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/search-shuttles",
        produces = { "application/json" }
    )
    
    ResponseEntity<GetAvailableShuttleRoutesResponse> getAvailableShuttleRoutes(
        @Parameter(name = "departureLocation", description = "", required = true, in = ParameterIn.QUERY) @RequestParam(value = "departureLocation", required = true) String departureLocation,
        @Parameter(name = "limit", description = "The maximum number of shuttles to return. If not provided, it will return all the shuttles from the offset.", in = ParameterIn.QUERY) @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "The offset from where to return the shuttles from. The first index is 0. If not provided, it will return the shuttles from the first index.", in = ParameterIn.QUERY) @RequestParam(value = "offset", required = false) Integer offset
    );

}
